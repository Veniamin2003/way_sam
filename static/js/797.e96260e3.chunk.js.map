{"version":3,"file":"static/js/797.e96260e3.chunk.js","mappings":"wMA0BMA,GAAiBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,SAAjBD,EAjBL,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC9B,OACI,kBAAMC,SAAUF,EAAhB,WACKG,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,GAAWC,EAAAA,KAC1CF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,GAAWC,EAAAA,GAAO,CAACC,KAAM,cAC9DH,EAAAA,EAAAA,IAAY,KAAM,aAAc,GAAIE,EAAAA,GAAO,CAACC,KAAM,YAAa,eAC9DL,IACE,gBAAKM,UAAWC,EAAAA,EAAAA,iBAAhB,SACKP,KAGT,0BAAK,8CA0BjB,WAAeQ,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAACE,MAAAA,EAAAA,IAAzC,EAlBc,SAACC,GAKX,OAAIA,EAAMH,QACC,SAAC,KAAD,CAAUI,GAAI,cAElB,4BACH,mCACA,SAAClB,EAAD,CAAgBK,SATH,SAACc,GACdF,EAAMD,MAAMG,EAASC,MAAOD,EAASE,SAAUF,EAASG,sB,2NC1B1DC,EAAc,SAAC,GAA8C,EAA7CC,MAA8C,IAAD,IAAtCC,KAAOC,EAA+B,EAA/BA,QAAStB,EAAsB,EAAtBA,MAAQuB,EAAc,EAAdA,SAC3CC,EAAWF,GAAWtB,EAC5B,OACI,iBAAKM,UAAWmB,EAAAA,EAAAA,YAAqB,KAAOD,EAAWC,EAAAA,EAAAA,MAAe,IAAtE,WACI,yBACKF,IAEHC,IAAY,0BAAOxB,QAKpB0B,EAAW,SAACb,GACrB,IAAOO,EAAoCP,EAApCO,MAAuBO,GAAad,EAA7BQ,KAA6BR,EAAvBe,OAApB,OAA2Cf,EAA3C,IACA,OAAO,SAACM,GAAD,kBAAiBN,GAAjB,cAAwB,uCAAcO,GAAUO,QAG9CvB,EAAQ,SAACS,GAElB,IAAOO,EAAoCP,EAApCO,MAAuBO,GAAad,EAA7BQ,KAA6BR,EAAvBe,OAApB,OAA2Cf,EAA3C,IACA,OAAO,SAACM,GAAD,kBAAiBN,GAAjB,cAAwB,oCAAWO,GAAUO,QAG3CzB,EAAc,SAAC2B,EAAaC,EAAMC,EAAYC,GAAhC,IAA2CnB,EAA3C,uDAAmD,GAAIoB,EAAvD,uDAA8D,GAA9D,OACvB,4BACI,SAAC,KAAD,QAAOJ,YAAaA,EACbC,KAAMA,EACNI,SAAUH,EACVC,UAAWA,GACPnB,IALf,IAMQoB,O,4EClCL,IAAM9B,EAAW,SAAAgC,GACpB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAAAF,GAC3C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCLlC,KAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB","sources":["components/Login/Login.jsx","components/common/FormsControls/FormsControls.js","utils/validators/validators.js","webpack://way_sam/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["import React from \"react\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Navigate} from \"react-router-dom\"\r\nimport style from \"../common/FormsControls/FormsControls.module.css\"\r\n\r\nconst LoginForm = ({handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField(\"Login\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember Me\")}\r\n            { error &&\r\n                <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div><button>Login</button></div>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({form: 'login'}) (LoginForm)\r\n\r\nconst Login = (props) => {\r\n    const onSubmit = (formData) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe )\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Navigate to={\"/profile\"}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n\r\n/*<form onSubmit={handleSubmit}>\r\n            {createField(\"Login\", \"email\", [required], Input)}\r\n            {createField(\"Password\", \"password\", [required], Input, {type: \"password\"})}\r\n            {createField(null, \"rememberMe\", [], Input, {type: \"checkbox\"}, \"remember Me\")}\r\n            { error &&\r\n                <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div><button>Login</button></div>\r\n        </form>*/","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {Field} from \"redux-form\";\r\n\r\nconst FormControl = ({input, meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")} >\r\n            <div>\r\n                {children}\r\n            </div>\r\n            { hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, props = {}, text = \"\") => (\r\n    <div>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n)","export const required = value => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__AAwsu\",\"error\":\"FormsControls_error__DRmrI\",\"formSummaryError\":\"FormsControls_formSummaryError__OepQF\"};"],"names":["LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","required","Input","type","className","style","connect","state","isAuth","auth","login","props","to","formData","email","password","rememberMe","FormControl","input","meta","touched","children","hasError","styles","Textarea","restProps","child","placeholder","name","validators","component","text","validate","value","maxLengthCreator","maxLength","length"],"sourceRoot":""}